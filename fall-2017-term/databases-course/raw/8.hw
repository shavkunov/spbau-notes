# Лекция 8. Алгоритмы выполнения физических операций

Нам интересна операция соединения. Алгоритм для операции выборки по какому-то условию $\sigma_{\theta}(R)$.
Чтобы сделать выборку из таблицы, нужно ее прочитать. B(R) -- количество страниц в таблице. Т.е. нужно сделать сначала B(R) чтений.
Первый разультат: когда найдем $t: \theta(t) = true$
Сам алгоритм чтения всей таблицы называется Full Scan или Table Scan.

## Nexted Loop Join

\begin{lstlisting}
R:[]
S:[]
for r in R:
	for s in S:
		if join(r, s):
			output $ \leftarrow $ (r, s)
\end{lstlisting}

Пусть буфер размера M т.ч. B(R) < M, B(S) > M. Чтобы эффективно организовать работу с памятью, поместим отношение R полностью в буфер и на свободное место уже будем помешать строки отношения S. Код будет в духе:

\begin{lstlisting}
for $b_S$ in S: 
	for $b_R$ in buffered(R):
		for r in $b_R$:
			for s in $b_S$:
				if join(r, s):
					output $ \leftarrow $ (r, s)
\end{lstlisting}

Обозначим за join\_blocks($b_R$, $b_S$) код с 3 по 6 строки.

Итоговая сложность: чтение(B(R)) + чтение отношения S общим циклом(B(S)) = B(R + S). При условии того, что одно отношение маленькое, то мы можем говорить о линейном времени работы. Да, тут есть два вложенных цикла for, но то что происходит в оперативной памяти нас волнует меньше, чем работа с самим диском, поэтому этим мы пренебрегаем.

Теперь рассмотрим ситуацию, когда ни одно из отношений в буфере не помещается. 
B(S) > M, B(R) > M.

\begin{lstlisting}
for i in $[@ B(R)/M @]$: // на самом деле в знаменателе M - 1
	M $ \leftarrow $ chunk(R, i) // чтение одной порции R
	for $b_S$ in S:
		for $b_R$ in M:
			join_blocks($b_R$, $b_S$)
\end{lstlisting}

Буфер забит, но будем считать, что у нас найдется место для чтения хотя бы одного блока из S. Т.е. мы можем написать тоже самое, но M - 1. Чтобы не отвлекатся на технические детали, оставляем так.
Сложность будет: $B(R) + @B(R)/M@ * B(S) ~ B(R) + @B(R)B(S)/M@$
При этом, очевидно, будет без разницы что мы читаем сначала(в алгоритме читали R): R или S.
Но на практике, если одно отношение больше буфера ненамного, а другое гораздо больше, то выгоднее поместить во внешний цикл то, которое меньше.
Многие отношения помещаются в буфер, поэтому использование вложенных циклов не такая уж и плохая идея.
Пример. Пусть B(R) = 1000. B(S) = 500. M = 100. Нашим алгоритмом мы сделаем $500 * 10 + 500 = 5500$ операций. S -- внешнее отношение. Почему мы не включаем в количество операции на запись результата? Во первых, можем передавать его куда-то наружу, во-вторых, запись будет добавлять константное число операций(т.е. столько же сколько и считывали с диска), поэтому не включаем.

## Sort Join

R(a, b), S(b, c)
Если R и S отсортированы в одинаковом порядке по атрибуту b, по которому происходит соединение.
Заведем два указателя на голову R и голову S. Если они равны по атрибуту b, то ура, выдаем результат и переметываем их на следующие кортежи, если неравны, то двигаем тот указатель, который меньше. Тут мы предполагали, что все атрибуты разные.
Сложность: $B(R) + B(S) = B(R + S)$
Если не отсортированы, то отсортируем через Multiway и сведем задачу к предыдущей: 
$\under{сортировка} {4(B(R + S))} + \under{Sort Join} {B(R + S)} = 5(B(R + S))$

Т.е. возвращаясь к примеру, мы все сделаем за $5 * (1000 + 500) = 7500$
Попробуем немного соптимизировать. После первого этапа Multiway Merge Sort у нас есть отсортированные списки отношения R и S. Попробуем находить минимальный элемент в частично отсортированных списках, а в полностью отсортированном массиве. Будет работать, если отсортированных списков отношения R и S меньше чем $@M/2@$. $B(R) < @M^2/2@$, $B(S) < @M^2/2@$. Тогда сложность будет $3B(R + S) = \under{I стадия сортировки} {2B(R + S)} + \under{слияние} {B(R + S)}$

Итого в примере имеем: $3 * (1000 + 500) = 4500$

## Hash Join

Мы хотим хешировать R(b), S(b), по отношению их общего атрибута b.
\begin{center}
\includegraphics[scale=0.8]{images/hashjoin.png}
\end{center}

Если у нас будет k ячеек в хеш таблице, то в каждой ячейке будет $@T(R)/k@$ элементов, где T(R) -- общее количество кортежей.
Если отношение R т.ч. B(R) < M, то можно оптимизировать Nested Loop: искать пары по хешу.
Т.е. искать для очередного $s \in S$ совпадения только в ячейке т.ч. h(s) = h(r), где h(x) -- хеш функция.

Положим, что \# ячеек = M и по этому размеру построим соответствующию хеш функцию. h: $r \in R \rightarrow [1..M]$ и $s \in S \rightarrow [1..M]$. Мы можем банально взять остаток от деления: $h = h'$ $mod$ $M + 1$, где $h'$ -- оригинальная $h': r \in R \rightarrow INT64$, но это технические детали.

Собственно, сам алгоритм:
1. Хешировать R и S по значению b. Получим на диске корзины для R и S. 
Если $B(R) < M^2$ и $B(S) < M^2$ и предполагаем, что распределение элементов по ячейкам -- равномерное, то тогда размер корзины/ячейки не больше M. Это мы сделаем за 2B(R + S).
2. В каждой ячейке сделать соединение при помощи вложенных циклов. Это сработает за линейное время: B(R + S).
В итоге: 3B(R + S). Этот алгоритм применяется довольно часто по умолчанию. 

Пример. B(R) = 110, B(S) = 180, M = 100. Вопрос: $R \bowtie S$ вложенными циклами. Сколько операций I/O?
Решение. Если запихнем во внешний цикл отношение из R: 100 + 180 и 10 + 180, сложим то получим 470. Если во внешний цикл запихнем отношение S: 100 + 110 и 80 + 110, сложим то получим 400.